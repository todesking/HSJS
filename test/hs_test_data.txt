(t:case "simple literal"
	(t:=> 1 1)
	(t:=> "a" "a")
	(t:type=> 1 Number)
	(t:type=> "a" (Array Character))
)

(t:case "list"
	(t:=> () ())
	(t:type=> (1 2 3) (Array Number))
	(t:=> (1 2 3) (1 2 3))
	(t:type=> ("a" "b") (Array (Array Character)))
	(t:type=> ((1) (1 2)) (Array (Array Number)))
	(t:=> ((1) (1 2)) ((1) (1 2)))
)

(t:case "list with non-literal element"
	(:bind a 1)
	(t:type=> (a 2 3) (Array Number))
	(t:type=> (a a) (Array Number))
	(t:=> (a 2 3) (1 2 3))
)

(t:case "range literal (finite)"
	(t:=> ([..] 1 3) (1 2 3))
)

(t:case "binding constant"
	(t:should_error x)
	(:bind x 1)
	(t:=> x 1)
	(t:type=> x Number)
	(t:should_error (:bind x 10))
)

(t:case "type decl"
	(:def a Number)
	(t:type=> a Number)
	(t:should_error (:bind a "hoge"))
	(:bind a 100)
	(t:type=> a Number)
	(t:=> a 100)

	(t:should_error (:def b UndefType))

	(:def an (Array Number))
	(:bind an (1 2 3))
	(t:=> an (1 2 3))
	(t:type=> an (Array Number))
)

(t:case "type decl: function"
	(:def a (-> Number Number))
	(t:type=> a (-> Number Number))

	(:def b (-> Number (Array Number) Number))
	(t:type=> b (-> Number (Array Number) Number))
)

(t:case "function"
	(t:pend)
	(:def id_n (-> Number Number))
	(:bind_fun id_n (x) x)
	(t:=> ($ id_n 1) 1)
	(t:should_error ($ id_n "string"))

	(:def t_head_n (-> (Array Number) Number))
	(:bind_fun t_head_n
		(|= ((x . xs)) x))
	(t:=> ($ t_head_n (1 2 3)) 1)
	(t:should_error ($ t_head_n ()))
	(t:should_error ($ t_head_n 1))

	(:def t_sum_of (-> (Array Number) Number))
	(:bind_fun t_sum_of
		(|= ((x . xs)) ($ + 1 ($ t_sum_of xs)))
		(|= (()) 0)
		)
	(t:=> ($ t_sum_of (1 2 3)) 6)
	(t:=> ($ t_sum_of ()) 0)
	(t:should_error ($ t_sum_of 10))

	(:def t_length_n (-> (Array Number) Number))
	(:bind_fun t_tail_n
		(|= (()) 0)
		(|= ((x . xs)) ($ t_tail_n xs))
		)
	(t:=> (t_length_n (1 2 3)) 4)

	(:def t_+_n (-> Number Number Number))
	(:bind_fun t_+_n (a b) (+ a b))
	(t:=> ($ + 1 2) 3)
	(t:=> ($ t_+_n 1 2) 3)
	(t:type=> ($ t_+_n 1) (-> Number Number))
	(t:=> ($ ($ t_+_n 1) 2) 3)
)

